<#@ include file="EF.Reverse.POCO.Core.ttinclude" #>
<#
	// Settings
    ConnectionStringName = "";  // Uses last connection string in config if not specified
    // Namespace = ""; // Override the namespace if you want to
    DbContextName = "MyDbContext";
    MakeClassesPartial = false;
    
    // If there are multiple schema, then the table name is prefixed with the schema, except for dbo.
    // Ie. dbo.hello will be Hello.
    //     abc.hello will be AbcHello.
    SchemaName = null;
    
    // Use the following table/view name regex filters to include or exclude tables/views
    // Exclude filters are checked first and tables matching filters are removed.
    //  * If left null, none are excluded.
    //  * If not null, any tables matching the regex are excluded.
    // Include filters are checked second.
    //  * If left null, all are included.
    //  * If not null, only the tables matching the regex are included.
    //  Example:    TableFilterExclude = new Regex(".*auto.*");
    //              TableFilterInclude = new Regex("(.*_FR_.*)|(data_.*)");
    //              TableFilterInclude = new Regex("table_name1|table_name2|etc");
    TableFilterExclude = null;
    TableFilterInclude = null;

    // Read schema
	var tables = LoadTables();
    
	// Generate output
	if (tables.Count>0)
	{
#>
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition.Hosting;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration;
using System.IO;
using System.Linq;
using System.Reflection;

namespace <#= Namespace #>
{
    // ************************************************************************
    // Database context
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#=DbContextName#> : DbContext
    {
<#
foreach(Table tbl in from t in tables.OrderBy(x => x.NameHumanCase) select t)
{
#>
        public IDbSet<<#=tbl.NameHumanCase#>> <#=tbl.NameHumanCase#> { get; set; } // <#=tbl.Name#>
<# } #>

        static MyDbContext()
        {
            Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
        {
        }

        public MyDbContext(string connectionString) : base(connectionString)
        {
        }

        private IEnumerable<Type> GetTypes()
        {
            var type = typeof(EntityTypeConfiguration<>);
            return GetType()
                .GetProperties(BindingFlags.Instance | BindingFlags.Public)
                .Where(p => p.PropertyType.IsGenericType &&
                            p.PropertyType.GetGenericTypeDefinition() == typeof(IDbSet<>))
                .Select(p => type.MakeGenericType(p.PropertyType.GetGenericArguments().First()))
                .ToArray();
        }

        private static void LoadAllEntityConfigurationsFromAllAssemblies(DbModelBuilder modelBuilder, IEnumerable<Type> types, string assemblyFilter, IEnumerable<string> namePartFilters)
        {
            var path = Path.GetDirectoryName(Path.GetFullPath(new Uri(Assembly.GetExecutingAssembly().EscapedCodeBase).LocalPath));
            if(string.IsNullOrEmpty(path))
                return;

            new DirectoryCatalog(path, assemblyFilter)
                .LoadedFiles
                .Where(x =>
                {
                    var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(x.ToLower());
                    if(fileNameWithoutExtension != null)
                    {
                        var parts = fileNameWithoutExtension.Split(".".ToCharArray());
                        return parts.Any(part => namePartFilters.Any(namePartFilter => part == namePartFilter.ToLower()));
                    }
                    return false;
                })
                .Select(Assembly.LoadFrom)
                .ToList()
                .ForEach(assembly => assembly.GetTypes()
                                         .Where(t => types.Contains(t.BaseType))
                                         .Select(Activator.CreateInstance)
                                         .ToList<dynamic>()
                                         .ForEach(instance => modelBuilder.Configurations.Add(instance)));
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            var typesToLoad = GetTypes();
            LoadAllEntityConfigurationsFromAllAssemblies(modelBuilder, typesToLoad, "*.dll", new[] { "Data", "Domain", "Poco", "Model", "Models" });
        }
    }

    // ************************************************************************
    // POCO classes

<#
foreach(Table tbl in from t in tables.OrderBy(x => x.NameHumanCase) select t)
{
#>
    // <#=tbl.Name#>
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCase#>
    {
<#
foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal))
{
#>
        <#=col.Entity #>
<# } #>
<# if(tbl.HasForeignKey) { #>

        // Foreign keys
<#
foreach(Column col in from c in tbl.Columns.OrderBy(x => x.Ordinal) where c.EntityFk != null select c)
{
#>
        <#=col.EntityFk #>
<# } } #>
    }

<# } #>

    // ************************************************************************
    // POCO Configuration

<#
foreach(Table tbl in tables.OrderBy(x => x.NameHumanCase))
{
#>
    // <#=tbl.Name#>
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCase#>Configuration : EntityTypeConfiguration<<#=tbl.NameHumanCase#>>
    {
        public <#=tbl.NameHumanCase#>Configuration()
        {
            ToTable("<#=tbl.Schema#>.<#=tbl.Name#>");
<# if (!string.IsNullOrEmpty(tbl.PrimaryKeyNameHumanCase())) { #>
            HasKey(<#=tbl.PrimaryKeyNameHumanCase()#>);
<# } #>

<#
foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal))
{
#>
            <#=col.Config #>
<# } #>
<# if(tbl.HasForeignKey) { #>

            // Foreign keys
<#
foreach(Column col in from c in tbl.Columns.OrderBy(x => x.Ordinal) where c.ConfigFk != null select c)
{
#>
            <#=col.ConfigFk #>
<# } } #>
        }
    }

<# } #>
}
<# } #>
